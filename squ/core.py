# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_core.ipynb.

# %% auto 0
__all__ = ['dirs', 'cache', 'retryer', 'login']

# %% ../nbs/02_core.ipynb 3
import json, subprocess, os, sys, pandas
from platformdirs import PlatformDirs
from diskcache import Cache, memoize_stampede
from tenacity import wait_random_exponential, stop_after_attempt, Retrying

# %% ../nbs/02_core.ipynb 5
dirs = PlatformDirs("nbdev-squ")
cache = Cache(dirs.user_cache_dir)
retryer = Retrying(wait=wait_random_exponential(), stop=stop_after_attempt(3))

# %% ../nbs/02_core.ipynb 6
def _cli(cmd: list[str], capture_output=True):
    cmd = [sys.executable, "-m", "azure.cli"] + cmd + ["-o", "json"]
    if capture_output: # Try lots, parse output as json
        result = retryer(subprocess.run, cmd, capture_output=capture_output, check=True)
        return json.loads(result.stdout.decode("utf8"))
    else: # Run interactively, ignore success/fail
        subprocess.run(cmd)

# %% ../nbs/02_core.ipynb 8
def login(refresh: bool=False # Force relogin
         ):
    if os.environ.get("IDENTITY_HEADER") and not cache.get("msi_failed"):
        if refresh:
            _cli(["logout"])
        try:
            _cli(["login", "--identity"])
        except subprocess.CalledProcessError:
            cache["msi_failed"] = True
        else:
            cache.delete("msi_failed")
            cache["logged_in"] = True
            cache["login_time"] = pandas.Timestamp("now")
    if not os.environ.get("IDENTITY_HEADER") or cache.get("msi_failed"):
        while not cache.get("logged_in"):
            try:
                _cli(["account", "show"])
            except subprocess.CalledProcessError:
                tenant = cache.get("tenant", [])
                if tenant:
                    tenant = ["--tenant", tenant]
                _cli(["login", *tenant, "--use-device-code"], capture_output=False)
            else:
                cache["logged_in"] = True
                cache["login_time"] = pandas.Timestamp("now")
